from .shared import (
    read_source_file,
    read_docs_file,
    update_autogenerated_section,
    write_output_file,
)
from openad.helpers.output import output_text


def update_base_concepts_md(filename="base-concepts.md"):
    """
    Update the base-concepts.md page for the documentation.

    - Copy the content of the current version of the page in /docs
    - Update the page with the latest concept descriptions from the _source description files
    - Store result in _output/docs/base-concepts.md
    """

    output_text(f"<h1>Generating <yellow>{filename}</yellow></h1>", pad_top=2)

    # Read base file content
    base_concepts_md = read_docs_file(filename)
    if not base_concepts_md:
        return

    # Read source file content
    about_mws_txt = read_source_file("about_mws.txt")
    if not about_mws_txt:
        return
    about_workspace_txt = read_source_file("about_workspace.txt")
    if not about_workspace_txt:
        return
    about_plugin_txt = read_source_file("about_plugin.txt")
    if not about_plugin_txt:
        return
    about_run_txt = read_source_file("about_run.txt")
    if not about_run_txt:
        return

    # Insert description
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "mws", about_mws_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "workspaces", about_workspace_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "plugins", about_plugin_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "runs", about_run_txt
    )
    if not base_concepts_md:
        return

    # Write to output file
    write_output_file("docs/" + filename, base_concepts_md)
