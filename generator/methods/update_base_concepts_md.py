from .shared import (
    read_source_file,
    read_docs_file,
    update_autogenerated_section,
    write_output_file,
)
from openad.helpers.output import output_text


# Generate the docs/base-concepts.md file with the concept descriptions
def update_base_concepts_md(filename="base-concepts.md"):
    output_text(f"<h1>Generating <yellow>{filename}</yellow></h1>", pad_top=2)

    # Read base file content
    base_concepts_md = read_docs_file(filename)
    if not base_concepts_md:
        return

    # Read source file content
    about_mws_txt = read_source_file("about_mws.txt")
    if not about_mws_txt:
        return
    about_workspaces_txt = read_source_file("about_workspaces.txt")
    if not about_workspaces_txt:
        return
    about_plugins_txt = read_source_file("about_plugins.txt")
    if not about_plugins_txt:
        return
    about_runs_txt = read_source_file("about_runs.txt")
    if not about_runs_txt:
        return

    # Insert description
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "mws", about_mws_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "workspaces", about_workspaces_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "plugins", about_plugins_txt
    )
    if not base_concepts_md:
        return
    base_concepts_md = update_autogenerated_section(
        base_concepts_md, "runs", about_runs_txt
    )
    if not base_concepts_md:
        return

    # Write to output file
    write_output_file("docs/" + filename, base_concepts_md)
